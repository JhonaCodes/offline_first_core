name: Rust Build for Mobile and Desktop

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-apple-android:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        run: |
          rustup update stable
          rustup target add aarch64-apple-ios aarch64-apple-darwin x86_64-apple-darwin
          # AÃ±adir targets necesarios para Android
          rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

      - name: Install Android NDK
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "ndk;25.2.9519653" --sdk_root=$ANDROID_HOME

      - name: Install cargo-ndk
        run: cargo install cargo-ndk

      - name: Build for Android
        run: |
          export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.2.9519653
          # Usamos cargo-ndk para Android
          cargo ndk -t armeabi-v7a -t arm64-v8a -t x86 -t x86_64 -o ./android-libs build --release

      - name: Build for iOS
        run: |
          cargo build --target aarch64-apple-ios --release
          install_name_tool -id "@rpath/liboffline_first_core.dylib" "target/aarch64-apple-ios/release/liboffline_first_core.dylib"

      - name: Build for macOS
        run: |
          cargo build --target aarch64-apple-darwin --release
          cargo build --target x86_64-apple-darwin --release
          
          install_name_tool -id "@rpath/liboffline_first_core_arm64.dylib" "target/aarch64-apple-darwin/release/liboffline_first_core.dylib"
          install_name_tool -id "@rpath/liboffline_first_core_x86_64.dylib" "target/x86_64-apple-darwin/release/liboffline_first_core.dylib"
          
          mv "target/aarch64-apple-darwin/release/liboffline_first_core.dylib" "target/aarch64-apple-darwin/release/liboffline_first_core_arm64.dylib"
          mv "target/x86_64-apple-darwin/release/liboffline_first_core.dylib" "target/x86_64-apple-darwin/release/liboffline_first_core_x86_64.dylib"

      - name: Run tests
        run: cargo test --verbose

      - name: Upload Android libs
        uses: actions/upload-artifact@v4
        with:
          name: android-libs
          path: ./android-libs/**/*

      - name: Upload iOS lib
        uses: actions/upload-artifact@v4
        with:
          name: ios-lib
          path: ./target/aarch64-apple-ios/release/liboffline_first_core.dylib

      - name: Upload macOS libs
        uses: actions/upload-artifact@v4
        with:
          name: macos-libs
          path: |
            ./target/aarch64-apple-darwin/release/liboffline_first_core_arm64.dylib
            ./target/x86_64-apple-darwin/release/liboffline_first_core_x86_64.dylib

  publish:
    needs: [build-apple-android]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          repository: JhonaCodes/flutter_local_db
          token: ${{ secrets.FLUTTER_REPO_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./tmp-artifacts

      - name: Move files to correct locations
        run: |
          # Crear directorios
          mkdir -p android/src/main/jniLibs/arm64-v8a
          mkdir -p android/src/main/jniLibs/armeabi-v7a
          mkdir -p android/src/main/jniLibs/x86
          mkdir -p android/src/main/jniLibs/x86_64
          mkdir -p ios/Frameworks
          mkdir -p macos/Frameworks
          
          # Verificar contenido de los directorios de artefactos
          echo "Android libs directory structure:"
          find ./tmp-artifacts/android-libs -type f | sort
          
          # Mover archivos Android
          find ./tmp-artifacts/android-libs -name "*.so" -type f -exec bash -c 'cp "$0" "android/src/main/jniLibs/$(basename $(dirname "$0"))/liboffline_first_core.so"' {} \;
          
          # Mover archivo iOS
          cp ./tmp-artifacts/ios-lib/liboffline_first_core.dylib ios/Frameworks/
          
          # Mover archivos macOS
          cp ./tmp-artifacts/macos-libs/liboffline_first_core_arm64.dylib macos/Frameworks/
          cp ./tmp-artifacts/macos-libs/liboffline_first_core_x86_64.dylib macos/Frameworks/

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add android/src/main/jniLibs ios/Frameworks macos/Frameworks
          git commit -m "Update native libraries from Rust build [skip ci]" || echo "No changes to commit"
          git push