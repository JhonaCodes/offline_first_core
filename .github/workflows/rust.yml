name: Rust Build for Mobile and Desktop

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-apple-android:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        run: |
          rustup update stable
          rustup target add aarch64-apple-ios aarch64-apple-darwin x86_64-apple-darwin
          # Añadir targets necesarios para Android
          rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

      - name: Install Android NDK
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "ndk;25.2.9519653" --sdk_root=$ANDROID_HOME

      - name: Install cargo-ndk
        run: cargo install cargo-ndk

      - name: Build for Android
        run: |
          export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.2.9519653
          # Compilar todas las arquitecturas Android con cargo-ndk
          cargo ndk -t arm64-v8a -t armeabi-v7a -t x86 -t x86_64 -o ./android-libs build --release
          
          # Verificar que se generaron los archivos
          echo "Generated Android libraries:"
          find ./android-libs -name "*.so" -type f | sort

      - name: Build for iOS
        run: |
          cargo build --target aarch64-apple-ios --release
          install_name_tool -id "@rpath/liboffline_first_core.dylib" "target/aarch64-apple-ios/release/liboffline_first_core.dylib"

      - name: Build for macOS
        run: |
          cargo build --target aarch64-apple-darwin --release
          cargo build --target x86_64-apple-darwin --release
          
          install_name_tool -id "@rpath/liboffline_first_core_arm64.dylib" "target/aarch64-apple-darwin/release/liboffline_first_core.dylib"
          install_name_tool -id "@rpath/liboffline_first_core_x86_64.dylib" "target/x86_64-apple-darwin/release/liboffline_first_core.dylib"
          
          mv "target/aarch64-apple-darwin/release/liboffline_first_core.dylib" "target/aarch64-apple-darwin/release/liboffline_first_core_arm64.dylib"
          mv "target/x86_64-apple-darwin/release/liboffline_first_core.dylib" "target/x86_64-apple-darwin/release/liboffline_first_core_x86_64.dylib"
          
          # Verificar archivos de macOS
          echo "Verificando archivos de macOS:"
          ls -la ./target/aarch64-apple-darwin/release/
          ls -la ./target/x86_64-apple-darwin/release/

      - name: Run tests
        run: cargo test --verbose

      - name: Upload Android libs
        uses: actions/upload-artifact@v4
        with:
          name: android-libs
          path: ./android-libs/**/*
          if-no-files-found: error

      - name: Upload iOS lib
        uses: actions/upload-artifact@v4
        with:
          name: ios-lib
          path: ./target/aarch64-apple-ios/release/liboffline_first_core.dylib
          if-no-files-found: error

      - name: Upload macOS libs
        uses: actions/upload-artifact@v4
        with:
          name: macos-libs
          path: |
            ./target/aarch64-apple-darwin/release/liboffline_first_core_arm64.dylib
            ./target/x86_64-apple-darwin/release/liboffline_first_core_x86_64.dylib
          if-no-files-found: warn

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        run: |
          rustup update stable
          rustup target add x86_64-unknown-linux-gnu

      - name: Install LMDB
        run: |
          sudo apt-get update
          sudo apt-get install -y liblmdb-dev

      - name: Build for Linux x86_64
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Upload Linux libs
        uses: actions/upload-artifact@v4
        with:
          name: linux-libs
          path: |
            ./target/x86_64-unknown-linux-gnu/release/liboffline_first_core.so
            ./target/x86_64-unknown-linux-gnu/release/liboffline_first_core.a
          if-no-files-found: error


  publish:
    needs: [build-apple-android, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          repository: JhonaCodes/flutter_local_db
          token: ${{ secrets.FLUTTER_REPO_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./tmp-artifacts

      - name: Move files to correct locations
        run: |
          
          # Verificar estructura de todos los directorios de artefactos
          echo "All artifact directories structure:"
          find ./tmp-artifacts -type f | sort
          
          # Mover archivos Android - cargo-ndk genera estructura por arquitectura
          if [ -d "./tmp-artifacts/android-libs" ]; then
            echo "Searching for Android libraries..."
            find ./tmp-artifacts/android-libs -name "*.so" -type f
            
            # Copiar cada arquitectura según la estructura generada por cargo-ndk
            for arch in arm64-v8a armeabi-v7a x86 x86_64; do
              if [ -f "./tmp-artifacts/android-libs/${arch}/liboffline_first_core.so" ]; then
                echo "Copying ${arch} library"
                cp "./tmp-artifacts/android-libs/${arch}/liboffline_first_core.so" "plugins/binaries/android/${arch}/"
              else
                echo "Warning: ${arch} library not found in expected location"
                # Buscar en cualquier subdirectorio
                find ./tmp-artifacts/android-libs -name "liboffline_first_core.so" -path "*${arch}*" -exec cp {} "plugins/binaries/android/${arch}/" \; || true
              fi
            done
          else
            echo "Android artifacts directory not found"
            echo "Available artifact directories:"
            ls -la ./tmp-artifacts/ || true
          fi
          
          # Mover archivo iOS
          if [ -f "./tmp-artifacts/ios-lib/liboffline_first_core.dylib" ]; then
            cp ./tmp-artifacts/ios-lib/liboffline_first_core.dylib plugins/binaries/ios/
          else
            echo "iOS library not found. Searching alternative paths..."
            find ./tmp-artifacts -name "*liboffline_first_core*.dylib" -not -path "*arm64.dylib" -not -path "*x86_64.dylib" -exec cp {} plugins/binaries/ios/liboffline_first_core.dylib \; || echo "No iOS library found"
          fi
          
          # Mover archivos macOS - con manejo de errores
          if [ -f "./tmp-artifacts/macos-libs/liboffline_first_core_arm64.dylib" ]; then
            cp ./tmp-artifacts/macos-libs/liboffline_first_core_arm64.dylib plugins/binaries/macos/
          else
            echo "macOS arm64 library not found. Searching alternative paths..."
            find ./tmp-artifacts -name "*liboffline_first_core*arm64*.dylib" -exec cp {} plugins/binaries/macos/liboffline_first_core_arm64.dylib \; || echo "No macOS arm64 library found"
          fi
          
          if [ -f "./tmp-artifacts/macos-libs/liboffline_first_core_x86_64.dylib" ]; then
            cp ./tmp-artifacts/macos-libs/liboffline_first_core_x86_64.dylib plugins/binaries/macos/
          else
            echo "macOS x86_64 library not found. Searching alternative paths..."
            find ./tmp-artifacts -name "*liboffline_first_core*x86_64*.dylib" -exec cp {} plugins/binaries/macos/liboffline_first_core_x86_64.dylib \; || echo "No macOS x86_64 library found"
          fi
          
          # También crear el binario universal para compatibilidad
          if [ -f "plugins/binaries/macos/liboffline_first_core_arm64.dylib" ] || [ -f "plugins/binaries/macos/liboffline_first_core_x86_64.dylib" ]; then
            # Usar el primero disponible como binario principal
            if [ -f "plugins/binaries/macos/liboffline_first_core_arm64.dylib" ]; then
              cp plugins/binaries/macos/liboffline_first_core_arm64.dylib plugins/binaries/macos/liboffline_first_core.dylib
            elif [ -f "plugins/binaries/macos/liboffline_first_core_x86_64.dylib" ]; then
              cp plugins/binaries/macos/liboffline_first_core_x86_64.dylib plugins/binaries/macos/liboffline_first_core.dylib
            fi
          fi
          
          # Verificar archivos copiados en nueva estructura
          echo "Files copied to plugins/binaries structure:"
          find plugins/binaries -type f | sort
          
          # Mover archivos Linux
          if [ -f "./tmp-artifacts/linux-libs/liboffline_first_core.so" ]; then
            cp ./tmp-artifacts/linux-libs/liboffline_first_core.so plugins/binaries/linux/
          else
            echo "Linux .so library not found. Searching alternative paths..."
            find ./tmp-artifacts -name "liboffline_first_core.so" -exec cp {} plugins/binaries/linux/ \; || echo "No Linux .so library found"
          fi
          
          if [ -f "./tmp-artifacts/linux-libs/liboffline_first_core.a" ]; then
            cp ./tmp-artifacts/linux-libs/liboffline_first_core.a plugins/binaries/linux/
          else
            echo "Linux .a library not found. Searching alternative paths..."
            find ./tmp-artifacts -name "liboffline_first_core.a" -exec cp {} plugins/binaries/linux/ \; || echo "No Linux .a library found"
          fi
          
          # Windows artifacts disabled
          
          # Verificación final de todos los archivos copiados
          echo "Final plugins/binaries structure:"
          find plugins/binaries -type f | sort

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Agregar nueva estructura de plugins/binaries
          if [ -n "$(find plugins/binaries -type f 2>/dev/null)" ]; then
            git add plugins/binaries
          fi
          
          # Windows lib add disabled
          
          
          git commit -m "Update native libraries in plugins/binaries structure [skip ci]" || echo "No changes to commit"
          git push
